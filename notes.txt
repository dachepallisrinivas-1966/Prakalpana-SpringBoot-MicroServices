D.Srinivas
31 years of experience
10+ years as a freelance corporate trainer
Clinetile Includes ....
    Capgemini,     Cognizant,   Infosys
    MPhasis,       Wipro,       HP
    Samsung,       CGI          etc.,
Full Stack Java Trainer
Visakhapatnam, Andhra Pradesh

dachepallisrinivas@yahoo.co.in
630 573 0633
-----------------------------------------------------------------------------------------

Pre-Requisites
----------------------
1. Core Java
        a) OOPS,  interfaces, abstract classes & methods, exception handling, collections
        b) Java 8 features
                -   Lamda Expressions, Stream API, functional interface,
                    DateTimeAPI, Optional etc.,
        c) JDBC
2. Advanced Java
        d) Servlets
        e) JSP
        f) JSTL (JSP Standard Tag Library)
            i.      core tags
                        <c:set
                        <c:out
                        <c:if
                        <c:choose
                        <c:for
            
            ii.     form tags
            iii.    formatting tags
            iv.     sql tags        (not important)
            
3.  Tools/Libraries
    g) Maven
        It is a build tool

    h) Logging
    i) JUnit 5

4.  UI
    j) HTML, CSS, Javascript, 

5.  Database
    k)  MySQL   (preferrable)

6.  Framework
    l) Spring Framework     (I will take care of)


    Lab Setup:
    ==================================
    1. JDk 8 / 11
    2. STS 4     (Spring Tool Suite)
    3. MySQL 8.x

    What is a Framework?
        A framework is a large body (usually set of classes) of pre-defined code to which we can add our
        own code to solve a problem in a specific domain.

    Advantages of Framework?
        efficiency, security, expense, support

        eg: Hibernate, Struts 1.0, Struts 2.0, JSF, Spring etc.,

    What is a Spring Framework?
        It is a java development platform that provides comprehensive infrastruture support 
        to develop java applications.
        
        One-Stop Shop

        Spring handles the infrastructure, so that we can focus on application related code.

    Advantages of Spring?
        Light Weight
        Pluggable
        Open Source
        reduce over all complexicity

    
    Spring Containers:
        a) create and manage objects        (IoC - Inversion of Control)
        b) inject dependencies              (DI - Dependency Injection)





18-Oct-2022
--------------------------
Bean:
    It is a managed class.    


Sping Containers:
    1) BeanFactory interface
        a) it is the root interface for accessing the Spring Container,
        b) it follows lazy loading
        c) beans are only instantiating whenever we call a getBean()
        d) used in small applications (like mobile apps)

        implementation classes:
        a) XMLBeanFactory 

    2) ApplicationContext interface
        it is the central interface wihtin a spring appplication that is used for providing configuration
        information to the application.
        It implements the BeanFactory interface.

        implementation classes:
        a) FileSystemXMLApplicationContext
        b) ClassPathXMLApplicationContext
        c) WebXMLApplicationContext
        d) AnnotationConfigApplicationContext

        supports MessageResource    (i18N)
        access to resources such as URLs and Files
        used in Enterprise level applications



    Build Tools:
    ----------------
    1) Maven
    2) Gradle


    Maven Project
        pom.xml             (project object model)
        dependencies        (jar files)
            groupId, artifactId, version, packaging (jar/war)     (xml)

        maven central repository        (mvnrepository.com)
        maven local repository          (.m2 folder)

        archetypes:
            quickstart
            webapp

19-Oct-2022
-------------------------
    bean configuration file         (.xml)

    1) property injection      (literal injection | setter injection)

    every class has only one object created by the container by default.
    it is known as "single ton" design patterns.


    configurations can be given in 4 ways,
    a) using xml file
    b) using annotations
    c) java based configuration using annotations
    d) external configuration

20-Oct-2022
--------------------------
    2) constructor injection
    3) array injection
    4) list injection
    5) set injection
    6) map injection
    7) bean injection

    

21-OCt-2022
---------------------------
    annotation based configuration

    1. bean configuration is done using annotations
    2. stereo type annotations:
	    @Component
	    +	@Service
	    +	@Repository
	    +	@Controller
	    +	@Configuration
        +   @RestController

    3. beans.xml
        +   we use only one xml tag.
        <annotation-config></annotation-config>


    program-to-interface:
    --------------------------
        List<String> list = new ArrayList<>();


24-Oct-2022
===================================================================
    java based configuration using annotations:

        @Configuration
        @ComponentScan("basePackage")
        public class MyBeanConfig {
            @Bean
            public Scanner kbinput() {
                return new Scanner(System.in);
            }

            @Bean
            public LocalDate today() {
                return LocalDate.now();
            }
        } 

    
25-Oct-2022
===============================================================
    @Autowired
        field           field injection
        constructor     constructor injection
        setter          setter injection

    -   byType  
    -   byName          @Qualifier("beanId")
                        it should be used in conjunction with @Autowired annotation.

    
    SpEL  (Spring Expression Language)

        ${key}


    @PropertySource("classpath:propertyFileName")
    public class MyBeanConfig {

    }


26-Oct-2022
=========================================================

                                                Spring Boot
                                            -----------------------
is a spring module that offers auto-configuration there by providing RAD.

    Spring Core         IoC,DI
    Spring Context      Autowiring and life cycle management
    Spring SpEL         Expression Language

        configure the bean config class, property source files ...

    Spring AOP          Aspect Oriented Programming
        configure AOP providers ...

    Spring Web          Web MVC and Web Rest API Support
        configure url-handler, view-resolvers, front controllers ...

If you spring boot, all the configurations are taken care by it.

Why Spring Boot?
    RAD tool
    Opinionated Dependencies
    No XML based configuration
    Convention over Configuration
    Integrated Server For Web Development   -   (tomcat, jetty server)
    Standardization of Micro Services   
    Cloud Support

Base Lines of Spring Boot 2.x?
    Java 8
    Spring 5.0
    Hibernate 5.2
    Tomcat 8.5
    Jetty 9.4
    Junit 5
    Maven
    Gradle 4.x

Spring Boot Application?
    a) using spring boot CLI
    b) using start.spring.io   (spring initializer)
    c) using STS, spring starter project


Spring Boot Starters:
------------------------
spring-boot-starter-parent
spring-boot-starter
spring-boot-test
spring-boot-starter-data-jdbc



@SpringBootApplication =        @SpringBootConfiguration        (@Configuration)
                            +   @ComponentScan("thePackageNameInWhichCurrentClassExists")
                            +   @EnableAutoConfiguration
                            +   @PropertySource("classpath:application.properties")


27-Oct-2022
=============================================================
SpringApplication.run():
    1. create an ApplicationContext. (all beans are created)
    2. exceute all Spring Boot Runners if any.
    3. Startup the embedded server if any.
    4. destroy the ApplicationContext.

Spring Boot Runners:
    1. CommandLineRunner        void run(String[] args)
    2. ApplicationRunner        void run(ApplicationArgs[] args)


28-Oct-2022
=============================================================================


                                        Spring JDBC
                                    --------------------
problems with JDBC:
-------------------
1. create the connection
2. create statement, preparedstatement
3. executing the query
4. close the resources


5. we need to perform exception handling
6. we need to handle transaction management

Spring JDBC advantages:
------------------------
1. no need to do all steps that are mentioned above.
2. it provide methods to execute queries directly.

API:  
--------------------------------
JdbcTemplate
NamedParameterJdbcTemplate
SimpleJdbcTemplate
SimpleJdbcInsert 
SimpleJdbcCall

JdbcTemplate:
---------------
1. It takes care of creation and release of resources.
2. It handles the exceptions

methods:
---------
public int update(String query) : to insert, update, delete
public int update(String query, Object ...args) : to insert, update, delete using PreparedStatement
public void execute(String query): to DDL commands
public T query(String sql, ResultSetExtractor rse): to fetch records using ResultSetExtractor
public List query(String sql, RowMapper rm) : to fetch records using RowMapper



                                    multi layered architecture
                                ------------------------------------

ui <-> service <-> dao <-> db

ui          (presentation layer):       inputs & outputs                
                                        all exception handling
service:    (business logic layer)      computations, validations
dao:        (data access layer)         database operations

DTO:    Data Transfer Object


31-Oct-2022
==================
RowMapper interface
    mapRow()

displayed products using Stream API
    stream()
    forEach()


1-Nov-2022
=================
                                                Full Stack Java Developer
                                            --------------------------------

Pre-Requisite:
1. Very Good Logical / Programming Skills   ('C',C++)   
        'C'         Procedure Oriented 
        C++         Object Oriented



Actual Course:
------------------
2. Databases
        Oracle
            SQL
            PL/SQL

3. Core Java    
        Java 8

4. Advanced Java
        JDBC
        HTML
        CSS
        Javascript
        Servlet
        JSP
        JSTL
        MVC Architecture

5. FrameWorks
        Hibernate
        JPA Hibernate
        Spring Course
            Spring Core
            Spring AOP
            Spring JDBC
            Spring MVC
            Spring MVC Rest
        
            Spring Boot
                Ioc & Dependency Injection 
                SpEL
                Spring Data 
                    Spring Data JDBC
                    Spring Data JPA
                Spring Boot MVC
                Spring Boot MVC Rest
                Spring Boot MVC Data Rest

6. Microservice


                                    Full Stack Java Developer With Angular / React / VueJS
                                ----------------------------------------------------------------
                                                    (UI Developer)
1. HTML
2. CSS
3. BootStrap
4. JavaScript
5. ES 6
6. TypeScript       (Angular)
7. Angular / React
8. Integrations


                                                    Spring Data
                                            -----------------------------
1. Spring Data JDBC
        NamedParameterJdbcTemplate
2. Spring Data JPA







    

   





   





    




    


    



